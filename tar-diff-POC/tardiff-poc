#!/bin/env python

import tempfile
import subprocess
import shutil
import sys
import json
import os
import tarfile
import hashlib


def calculate_sha256_checksum(fileobj):
    sha256_hash = hashlib.sha256()
    for byte_block in iter(lambda: fileobj.read(4096), b""):
        sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()


def exec_cmd(cmd):
    print("Running: %s" % " ".join(cmd))
    p = subprocess.Popen(cmd, shell=False)
    err = p.wait()
    if p.returncode != 0:
        print("Error: %s" % err)
        sys.exit(1)


def drop_algo(digest):
    return digest.split(":")[1]


def process_tar(path):
    layer = {}
    with tarfile.open(path) as tar:
        while True:
            t = tar.next()
            if t is None:
                break
            if t.isfile():
                f = tar.extractfile(t)
                checksum = calculate_sha256_checksum(f)
                layer[checksum] = {
                    "path": t.path,
                    "offset": t.offset,
                    "size": t.size,
                    "checksum": checksum
                }
    return layer


def find_best_matching_layer(src_layers, dest_layer):
    best_layer = None
    best_score = -1
    for i in src_layers:
        score = 0
        for j in dest_layer:
            if j in src_layers[i]:
                score += src_layers[i][j]["size"]
        if score > best_score:
            best_score = score
            best_layer = i
    return best_layer


def create_delta(src, dest, directory):
    os.mkdir(directory)

    with tempfile.TemporaryDirectory() as tmpdir:
        src_exploded = tempfile.TemporaryDirectory(dir=tmpdir)
        exec_cmd(
                ["podman",
                 "push",
                 "--force-compression",
                 "--compress=false",
                 src, "dir:%s" % src_exploded.name])

        dest_exploded = tempfile.TemporaryDirectory(dir=tmpdir)
        exec_cmd(
                ["podman",
                 "push",
                 "--force-compression",
                 "--compress=false",
                 dest, "dir:%s" % dest_exploded.name])

        src_manifest = json.load(
                open(os.path.join(src_exploded.name, "manifest.json")))
        dest_manifest = json.load(
                open(os.path.join(dest_exploded.name, "manifest.json")))

        src_layers = {}
        for i in src_manifest["layers"]:
            from_file = os.path.join(src_exploded.name, drop_algo(i["digest"]))
            src_layer = process_tar(from_file)
            src_layers[drop_algo(i["digest"])] = src_layer

        already_copied = {}

        for i in dest_manifest["layers"]:
            layer = process_tar(
                    os.path.join(dest_exploded.name, drop_algo(i["digest"])))

            closest_layer = find_best_matching_layer(src_layers, layer)

            already_copied[drop_algo(i["digest"])] = True
            from_file = os.path.join(src_exploded.name, closest_layer)
            to_file = os.path.join(dest_exploded.name, drop_algo(i["digest"]))
            name = "%s-%s" % (closest_layer, drop_algo(i["digest"]))

            diff_file = os.path.join(directory, name)

            exec_cmd(["tar-diff", from_file, to_file, diff_file])

        for i in os.listdir(dest_exploded.name):
            if i in already_copied:
                continue
            print("Copying %s" % i)
            shutil.copy(os.path.join(
                dest_exploded.name, i), os.path.join(directory, i))


def apply_delta(store, src, diff_dir, out):
    os.mkdir(out)

    layers_file = os.path.join(store, "overlay-layers/layers.json")
    with open(layers_file) as f:
        json_data = json.load(f)

    with tempfile.TemporaryDirectory() as tmpdir:
        src_exploded = tempfile.TemporaryDirectory(dir=tmpdir)
        exec_cmd(
                ["podman",
                 "push",
                 "--force-compression",
                 "--compress=false",
                 src,
                 "dir:%s" % src_exploded.name])

        for i in os.listdir(diff_dir):
            if i.find("-") > 0:
                parts = i.split("-")
                to_file = os.path.join(out, parts[1])
                diff_file = os.path.join(diff_dir, i)

                path = ""
                for j in json_data:
                    d = j.get("diff-digest")
                    if d is None:
                        continue
                    if parts[0] == drop_algo(d):
                        path = os.path.join(store, "overlay", j["id"], "diff")
                        break
                if path == "":
                    print("Could not find layer %s" % parts[0])
                    sys.exit(1)
                exec_cmd(["tar-patch", diff_file, path, to_file])
            else:
                print("Copying %s" % i)
                shutil.copy(os.path.join(diff_dir, i), os.path.join(out, i))


def usage():
    print("Usage: %s diff SRC DEST DIFF_DIR | apply STORE SRC DIFF_DIR OUT"
          % sys.argv[0])
    sys.exit(1)


if len(sys.argv) < 5:
    usage()

action = sys.argv[1]
if action == "diff":
    src, dest, directory = sys.argv[2], sys.argv[3], sys.argv[4]
    create_delta(src, dest, directory)
elif action == "apply":
    if len(sys.argv) < 6:
        usage()

    store, src, diff_dir, out = (
        sys.argv[2],
        sys.argv[3],
        sys.argv[4],
        sys.argv[5]
    )

    apply_delta(store, src, diff_dir, out)
else:
    print("Unknown command %s" % action)
    sys.exit(1)
